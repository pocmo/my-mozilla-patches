From: Sebastian Kaspari <s.kaspari@gmail.com>
Bug 1126048 - Add test to ensure state is correct when switching to loading pages. r=mcomella


diff --git a/mobile/android/base/tests/StringHelper.java b/mobile/android/base/tests/StringHelper.java
index fb0f9ef..0fd431f 100644
--- a/mobile/android/base/tests/StringHelper.java
+++ b/mobile/android/base/tests/StringHelper.java
@@ -109,16 +109,17 @@ public class StringHelper {
     public static final String ROBOCOP_POPUP_URL = "/robocop/robocop_popup.html";
     public static final String ROBOCOP_OFFLINE_STORAGE_URL = "/robocop/robocop_offline_storage.html";
     public static final String ROBOCOP_PICTURE_LINK_URL = "/robocop/robocop_picture_link.html";
     public static final String ROBOCOP_SEARCH_URL = "/robocop/robocop_search.html";
     public static final String ROBOCOP_TEXT_PAGE_URL = "/robocop/robocop_text_page.html";
     public static final String ROBOCOP_ADOBE_FLASH_URL = "/robocop/robocop_adobe_flash.html";
     public static final String ROBOCOP_INPUT_URL = "/robocop/robocop_input.html";
     public static final String ROBOCOP_READER_MODE_BASIC_ARTICLE = "/robocop/reader_mode_pages/basic_article.html";
+    public static final String ROBOCOP_LINK_TO_SLOW_LOADING = "/robocop/robocop_link_to_slow_loading.html";
 
     private static final String ROBOCOP_JS_HARNESS_URL = "/robocop/robocop_javascript.html";
 
     /**
      * Build a URL for loading a Javascript file in the Robocop Javascript
      * harness.
      * <p>
      * We append a random slug to avoid caching: see
diff --git a/mobile/android/base/tests/components/ToolbarComponent.java b/mobile/android/base/tests/components/ToolbarComponent.java
index dfb8cce..e453b48 100644
--- a/mobile/android/base/tests/components/ToolbarComponent.java
+++ b/mobile/android/base/tests/components/ToolbarComponent.java
@@ -79,16 +79,21 @@ public class ToolbarComponent extends BaseComponent {
         return this;
     }
 
     public ToolbarComponent assertIsUrlEditTextNotSelected() {
         fAssertFalse("The edit text is not selected", isUrlEditTextSelected());
         return this;
     }
 
+    public ToolbarComponent assertBackButtonIsNotEnabled() {
+        fAssertFalse("The back button is not enabled", isBackButtonEnabled());
+        return this;
+    }
+
     /**
      * Returns the root View for the browser toolbar.
      */
     private View getToolbarView() {
         mSolo.waitForView(R.id.browser_toolbar);
         return mSolo.getView(R.id.browser_toolbar);
     }
 
@@ -301,9 +306,13 @@ public class ToolbarComponent extends BaseComponent {
         }, READER_MODE_WAIT_MS);
 
         return readerModeButton[0];
     }
 
     private boolean isUrlEditTextSelected() {
         return getUrlEditText().isSelected();
     }
+
+    private boolean isBackButtonEnabled() {
+        return getBackButton().isEnabled();
+    }
 }
diff --git a/mobile/android/base/tests/robocop.ini b/mobile/android/base/tests/robocop.ini
index c476866..888efc2 100644
--- a/mobile/android/base/tests/robocop.ini
+++ b/mobile/android/base/tests/robocop.ini
@@ -138,16 +138,17 @@ skip-if = android_version == "10"
 [testGeckoRequest]
 [testInputConnection]
 # disabled on Android 2.3; bug 1025968
 skip-if = android_version == "10"
 [testJavascriptBridge]
 [testNativeCrypto]
 [testReaderModeTitle]
 [testSessionHistory]
+[testStateWhileLoading]
 
 # testSelectionHandler disabled on Android 2.3 by trailing skip-if, due to bug 980074
 [testSelectionHandler]
 skip-if = android_version == "10"
 
 # testInputSelections disabled on Android 2.3 by trailing skip-if, due to bug 980074
 [testInputSelections]
 skip-if = android_version == "10"
diff --git a/mobile/android/base/tests/robocop_link_to_slow_loading.html b/mobile/android/base/tests/robocop_link_to_slow_loading.html
new file mode 100644
index 0000000..45e487c
--- /dev/null
+++ b/mobile/android/base/tests/robocop_link_to_slow_loading.html
@@ -0,0 +1,12 @@
+<html>
+<head>
+    <title>Link</title>
+    <meta name="viewport" content="initial-scale=1.0"/>
+    <meta charset="utf-8">
+</head>
+<body style="margin: 0; padding: 0">
+<div style="text-align: center; margin: 0; padding: 0">
+    <a style="font-size: 60px" href="robocop_slow_loading.html">Slow Loading Page</a>
+</div>
+</body>
+</html>
diff --git a/mobile/android/base/tests/robocop_slow_loading.html b/mobile/android/base/tests/robocop_slow_loading.html
new file mode 100644
index 0000000..2b99bc9
--- /dev/null
+++ b/mobile/android/base/tests/robocop_slow_loading.html
@@ -0,0 +1,22 @@
+<html>
+<head>
+    <title>Slow Loading</title>
+    <meta name="viewport" content="initial-scale=1.0"/>
+    <meta charset="utf-8">
+    <script type="text/javascript">
+
+        // Busy wait for 10 seconds (There's no sleep function in JavaScript)
+        var start = new Date();
+        var now = null;
+        do {
+            now = new Date();
+        } while (now - start < 10000);
+
+    </script>
+</head>
+<body style="margin: 0; padding: 0">
+<div style="text-align: center; margin: 0; padding: 0">
+    <h1>This page is loading very slow.</h1>
+</div>
+</body>
+</html>
diff --git a/mobile/android/base/tests/testStateWhileLoading.java b/mobile/android/base/tests/testStateWhileLoading.java
new file mode 100644
index 0000000..6d3b35e
--- /dev/null
+++ b/mobile/android/base/tests/testStateWhileLoading.java
@@ -0,0 +1,68 @@
+package org.mozilla.gecko.tests;
+
+import android.util.DisplayMetrics;
+import android.view.View;
+
+import org.mozilla.gecko.R;
+import org.mozilla.gecko.tests.helpers.DeviceHelper;
+import org.mozilla.gecko.tests.helpers.NavigationHelper;
+import org.mozilla.gecko.tests.helpers.WaitHelper;
+import org.mozilla.gecko.widget.TwoWayView;
+
+import static org.mozilla.gecko.tests.helpers.AssertionHelper.*;
+
+/**
+ * This test ensures the back/forward state is correct when switching to loading pages.
+ */
+public class testStateWhileLoading extends UITest {
+    public void testStateWhileLoading() {
+        if (!DeviceHelper.isTablet()) {
+            // This test case only covers tablets.
+            return;
+        }
+
+        NavigationHelper.enterAndLoadUrl(StringHelper.ROBOCOP_LINK_TO_SLOW_LOADING);
+
+        openLinkInNewTab();
+
+        WaitHelper.waitForPageLoad(new Runnable() {
+            @Override
+            public void run() {
+                switchToNewTab();
+
+                // Assert state of the back and forward button is correct after
+                // switching to the new (still loading) tab.
+                mToolbar.assertBackButtonIsNotEnabled();
+            }
+        });
+
+        // Assert that the state of the back and forward button is still correct
+        // after the page has loaded.
+        mToolbar.assertBackButtonIsNotEnabled();
+    }
+
+    private void openLinkInNewTab() {
+        DisplayMetrics dm = new DisplayMetrics();
+        getActivity().getWindowManager().getDefaultDisplay().getMetrics(dm);
+
+        mSolo.clickLongOnScreen(
+                mDriver.getGeckoLeft() + mDriver.getGeckoWidth() / 2,
+                mDriver.getGeckoTop() + 30 * dm.density
+        );
+
+        // Click on "Open Link in New Tab"
+        mSolo.clickOnText(StringHelper.CONTEXT_MENU_ITEMS_IN_NORMAL_TAB[0]);
+    }
+
+    private void switchToNewTab() {
+        TwoWayView tabStrip = (TwoWayView) mSolo.getView(R.id.tab_strip);
+
+        fAssertNotNull("Tab strip is not null", tabStrip);
+        fAssertEquals("Tab strip contains two tabs", 2, tabStrip.getChildCount());
+
+        View tabView = tabStrip.getChildAt(1);
+        fAssertNotNull("Second tab is not null", tabView);
+
+        mSolo.clickOnView(tabView);
+    }
+}
